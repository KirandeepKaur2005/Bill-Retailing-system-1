import customtkinter as ctk
import tkinter as tk
from tkinter import ttk
from tkinter import messagebox
import pymysql
import time
import os
import tempfile

root = ctk.CTk()
root.geometry("800x600")
root.title("HOTEL MANAGEMENT SYSTEM")
screen_width = 800
screen_height = 600

item_boxes = []
item_counts = []
item_rates = []
item_boxes_list = []

def create_box():
    global item_boxes, item_counts
    
    try:
        a = no_of_items_purchased_btn.get()
        for i in range(int(a)):
            item_name = ctk.CTkLabel(info_item_frame, text = "Item Name")
            item_name.grid(row = 2, column = 0, pady = 5)
            item_count = ctk.CTkLabel(info_item_frame, text = "Item Count")
            item_count.grid(row = 2, column = 1, pady = 5)
            item_box = ctk.CTkComboBox(info_item_frame, values = ["Pizza", "Pasta", "Burger", "Bread"])
            
            item_box.grid(row = i+3, column = 0, pady = 5 )
            item_boxes.append(item_box)
            no_item = ctk.CTkEntry(info_item_frame)
            no_item.grid(row = i+3, column = 1, pady = 5)
            item_counts.append(no_item)
        
    except Exception as e:
        messagebox.showerror("Error", "Error is {e}")

    

def reset_box():
    global item_boxes, item_counts

    try:
        no_of_items_purchased_btn.delete(0, "end")

        for item_box in item_boxes:
            item_box.destroy()
        for item_count in item_counts:
            item_count.destroy()

        item_boxes=[]
        item_counts = []
        
    except Exception as e:
        messagebox.showerror("Error", f"Error is {e}")

def generate_payment():
    total_payment = 0
    for i in range (len(item_boxes)):
        item_name = item_boxes[i].get()
        item_count = item_counts[i].get()
        if item_name == "Pizza":
            total_payment += int(item_count)*10
        elif item_name == "Pasta":
            total_payment += int(item_count)*15
        elif item_name == "Burger":
            total_payment += int(item_count)*12
        elif item_name == "Bread":
            total_payment += int(item_count)*5
    
    total_payment_btn.delete(0, "end")
    total_payment_btn.insert(0, str(total_payment))

#################################################################################################

def add():
    # Check if any required field is empty
    if (cust_bill_ref_btn.get() == "" or
        cust_name_btn.get() == "" or
        cust_contact_btn.get() == "" or
        cust_date_btn.get() == "" or
        cust_payment_mode_btn.get() == "" or
        cust_time_btn.get() == "" or
        total_payment_btn.get() == ""):

        messagebox.showerror("Error", "All records are required")
        return

    # Get values from the input fields
    bill_ref_no = cust_bill_ref_btn.get()
    name = cust_name_btn.get()
    
    # Validate and convert contact field to integer
    try:
        contact = int(cust_contact_btn.get())
    except ValueError:
        messagebox.showerror("Error", "Contact must be a valid integer")
        return
    
    date = cust_date_btn.get()
    payment_mode = cust_payment_mode_btn.get()

    try:
        time = str(cust_time_btn.get())
    except pymysql.MySQLError as e:
        messagebox.showerror("Error", "Error is {e}")

    # Validate and convert total_payment field to a float or integer
    try:
        total_payment = float(total_payment_btn.get())
    except ValueError:
        messagebox.showerror("Error", "Total Payment must be a valid number")
        return

    # Connect to the database and insert data
    try:
        conn = pymysql.connect(
            host="localhost",
            user="root",
            password="Kiran2005#",
            database="bill_retailing"
        )
        my_cursor = conn.cursor()
        my_cursor.execute(
            "INSERT INTO record (bill_ref_no, name, contact, date, payment_mode,time, total_payment) VALUES (%s, %s, %s, %s, %s, %s, %s)",
            (bill_ref_no, name, contact, date, payment_mode, time, total_payment)
        )
        conn.commit()
        fetch_data()
        conn.close()
        messagebox.showinfo("Success", "Data has been inserted successfully!")
    except pymysql.MySQLError as e:
        messagebox.showerror("Database Error", f"Error inserting data: {e}")

#################################################################################################

def fetch_data():
    conn = pymysql.connect(host = "localhost", user = "root", password = "Kiran2005#", database = "bill_retailing")
    my_cursor = conn.cursor()
    my_cursor.execute("select * from record order by date desc, time desc")
    rows = my_cursor.fetchall()
    if len(rows) != 0:
        tree.delete(*tree.get_children())
        for i in rows:
            tree.insert("", "end", values=i)
            conn.commit()

        conn.close()

##################################################################################################


def get_cursor(event = ""):

    cursor_row = tree.focus()
    content = tree.item(cursor_row)
    row = content["values"]

    cust_bill_ref_btn.delete(0, "end")
    cust_bill_ref_btn.insert(0, row[0])
    cust_name_btn.delete(0, "end")
    cust_name_btn.insert(0, row[1])
    cust_contact_btn.delete(0, "end")
    cust_contact_btn.insert(0, row[2])
    cust_date_btn.delete(0, "end")
    cust_date_btn.insert(0, row[3])
    cust_payment_mode_btn.set(row[4])
    cust_time_btn.delete(0, "end")
    cust_time_btn.insert(0, row[5])
    total_payment_btn.delete(0, "end")
    total_payment_btn.insert(0, row[6])

    bill_area.delete(0.0, "end")
    f2 = open('bills/' + str(cust_bill_ref_btn.get()) + ".txt", 'r')
    bill_data_text = f2.read()
    bill_area.insert(0.0, bill_data_text)

##################################################################################################

def delete():
    global item_boxes, item_counts
    try:
        conn = pymysql.connect(host = "localhost", user = "root", password = "Kiran2005#", database="bill_retailing")
        my_cursor = conn.cursor()
        my_cursor.execute("delete from record where bill_ref_no = %s", cust_bill_ref_btn.get())
        conn.commit()
        conn.close()
        cust_bill_ref_btn.delete(0, "end")
        cust_name_btn.delete(0, "end")
        cust_contact_btn.delete(0, "end")
        cust_date_btn.delete(0, "end")
        cust_payment_mode_btn.set("Cash")
        cust_time_btn.delete(0, "end")
        current_time = time.localtime()
        formatted_time = time.strftime("%H:%M", current_time)
        cust_time_btn.insert(0, formatted_time)
        total_payment_btn.delete(0, "end")

        for item_box in item_boxes:
            item_box.destroy()
        for item_count in item_counts:
            item_count.destroy()
        no_of_items_purchased_btn.delete(0, "end")
        


        fetch_data()
        messagebox.showinfo(message= "Data deleted successfully")
    
    except pymysql.MySQLError as e:
        messagebox.showerror("Database Error", message= f"Error is {e}")

###################################################################################################

def update():
    try:
        conn = pymysql.connect(host = "localhost", user = "root", password = "Kiran2005#", database = "bill_retailing")
        my_cursor = conn.cursor()
        my_cursor.execute("update record set name = %s, contact = %s, date = %s, payment_mode = %s, time = %s, total_payment = %s where bill_ref_no = %s", 
                            (cust_name_btn.get(),
                            cust_contact_btn.get(),
                            cust_date_btn.get(),
                            cust_payment_mode_btn.get(),
                            cust_time_btn.get(),
                            total_payment_btn.get(),
                            cust_bill_ref_btn.get()))
        conn.commit()
        conn.close()
        fetch_data()
        messagebox.showinfo(message= "Data updated successfully")
    except pymysql.MySQLError as e:
        messagebox.showerror("Database Error", message=f"Error is {e}")
    
###################################################################################################

def reset():
    global item_boxes, item_counts
    
    try:
        cust_bill_ref_btn.delete(0,"end")
        cust_name_btn.delete(0,"end")
        cust_contact_btn.delete(0,"end")
        cust_date_btn.delete(0,"end")
        cust_payment_mode_btn.set("Cash")
        cust_time_btn.delete(0,"end")
        current_time = time.localtime()
        formatted_time = str(time.strftime("%H:%M", current_time))
        cust_time_btn.insert(0, formatted_time)
        total_payment_btn.delete(0,"end")

        for box in item_boxes:
            box.destroy()
        for count in item_counts:
            count.destroy()

        no_of_items_purchased_btn.delete(0, "end")
        bill_area.delete(0.0,"end")

        messagebox.showinfo(message="Columns reseted successfully")
    
    except Exception as e:
        messagebox.showerror("Error", message=f"Error is {e}")

#####################################################################################################

def create_bill():
    
    global item_boxes,item_counts,item_rates, item_boxes_list
    
    try: 
        for i in range (len(item_boxes)):
            item_name = item_boxes[i].get()
            # item_count = item_counts[i].get()
            if item_name == "Pizza":
                item_rates.append(10)
            elif item_name == "Pasta":
                item_rates.append(15)
            elif item_name == "Burger":
                item_rates.append(12)
            elif item_name == "Bread":
                item_rates.append(5)
        
        count_lst  = []
        for i in range(len(item_boxes)):
            item_count = item_counts[i].get()
            count_lst.append(item_count)

        sgst = 0.09 * float(total_payment_btn.get())
        cgst = 0.09 * float(total_payment_btn.get())
        total_payable_amount = int(total_payment_btn.get())+sgst+cgst
        
        bill_area.insert("1.0", f"Bill Ref no    :    {cust_bill_ref_btn.get()}\n")
        bill_area.insert("2.0", f"Name           :    {cust_name_btn.get()}\n")
        bill_area.insert("3.0", f"Contact        :    {cust_contact_btn.get()}\n")
        bill_area.insert("4.0", "=======================================================\n")
        bill_area.insert("5.0", f"Product\t\t\tQty\t Price\t\tAmount\n")
            
        for i in range(int(no_of_items_purchased_btn.get())):
            rate = int(item_rates[i])
            count = int(count_lst[i])
            # count = [item_counts[i].get() for i in range(int(no_of_items_purchased_btn.get())]
            bill_area.insert(str(i+6.0), f"{item_boxes[i].get()}\t\t\t{item_counts[i].get()}\t Rs{item_rates[i]:.2f}\t\tRs{rate * count:.2f}\n")
        
        bill_area.insert(str(int(no_of_items_purchased_btn.get()) + 6.0), "=======================================================\n")
        bill_area.insert(str(int(no_of_items_purchased_btn.get()) + 7.0), f"GROSS TOTAL\t\t\t\t\t\tRs{int(total_payment_btn.get()):.2f}\n")
        bill_area.insert(str(int(no_of_items_purchased_btn.get()) + 8.0), f"SGST\t\t\t\t\t\tRs{float(sgst):.2f}\n")
        bill_area.insert(str(int(no_of_items_purchased_btn.get()) + 9.0), f"CGST\t\t\t\t\t\tRs{float(cgst):.2f}\n")
        bill_area.insert(str(int(no_of_items_purchased_btn.get()) + 10.0), "=======================================================\n")
        bill_area.insert(str(int(no_of_items_purchased_btn.get()) + 11.0), f"TOTAL AMOUNT TO BE PAID\t\t\t\t\t\tRs{total_payable_amount:.2f}\n")
        bill_area.insert(str(int(no_of_items_purchased_btn.get()) + 12.0), "=======================================================\n")
        bill_area.insert(str(int(no_of_items_purchased_btn.get()) + 14.0), "                     \n")
        bill_area.insert(str(int(no_of_items_purchased_btn.get()) + 14.0), "---------------------Visit Again!!---------------------\n")

    except Exception as e:
        messagebox.showerror("Error", message=f"Error is {e}")


def save_bill():

    ans = messagebox.askyesnocancel("Save bill?", message="Do you want to save the bill?")

    if ans > 0:
        bill_data = bill_area.get(0.0, "end")
        f1 = open('bills/'+ str(cust_bill_ref_btn.get())+".txt", 'w')
        f1.write(bill_data)
        ans = messagebox.showinfo("Bill Saved", message= f"Bill No. {cust_bill_ref_btn.get()} saved successfully")
        f1.close()

     
def print_bill():
    txt = bill_area.get(0.0, "end-1c")
    filename = tempfile.mktemp('.txt')
    open(filename,'w').write(txt)
    os.startfile(filename, "print")

####################################################################################################

title_frame = ctk.CTkFrame(root)
title_frame.place(relx = 0.01, rely = 0.01 , relwidth = 0.98, relheight = 0.1)

title = ctk.CTkLabel(title_frame, text="HOTEL MANAGEMENT SYSTEM", font = ctk.CTkFont("Times New Roman", 50))
title.pack(padx = 5, pady = 5, expand = True)

info_frame = ctk.CTkFrame(root)
info_frame.place(relx = 0.012, rely = 0.13, relwidth = 0.641, relheight = 0.47)
info_label = ctk.CTkLabel(info_frame, text = "Customer information", font = ctk.CTkFont("Arial", size = 25))
info_label.place(x = 15, y = 5)
info_cust_frame = ctk.CTkFrame(info_frame)
info_cust_frame.place(relx = 0.01, rely = 0.12, relheight = 0.87, relwidth = 0.43)
info_item_frame = ctk.CTkScrollableFrame(info_frame)
info_item_frame.place(relx = 0.45, rely = 0.12, relheight = 0.87, relwidth = 0.538)


bill_frame = ctk.CTkFrame(root)
bill_frame.place(relx = 0.663, rely = 0.13, relheight = 0.465, relwidth = 0.325)

btn_frame = ctk.CTkFrame(root)
btn_frame.place(relx = 0.01, rely = 0.61, relheight = 0.065, relwidth = 0.98)

record_frame = ctk.CTkFrame(root)
record_frame.place(relx = 0.01, rely = 0.685, relheight = 0.3, relwidth = 0.98)

#####################################################################################################

cust_bill_ref = ctk.CTkLabel(info_cust_frame, text = "Bill Ref No : ")
cust_bill_ref.place(relx = 0.03, rely = 0.03)
cust_name = ctk.CTkLabel(info_cust_frame, text = "Name : ")
cust_name.place(relx = 0.03, rely = 0.15)
cust_contact = ctk.CTkLabel(info_cust_frame, text = "Contact : ")
cust_contact.place(relx = 0.03, rely = 0.27)
cust_date = ctk.CTkLabel(info_cust_frame, text = "Date : ")
cust_date.place(relx = 0.03, rely = 0.4)
cust_payment_mode = ctk.CTkLabel(info_cust_frame, text = "Pay Mode : ")
cust_payment_mode.place(relx = 0.03, rely = 0.53)
cust_time = ctk.CTkLabel(info_cust_frame, text = "Time : ")
cust_time.place(relx = 0.03, rely = 0.66)

cust_bill_ref_btn = ctk.CTkEntry(info_cust_frame)
cust_bill_ref_btn.place(relx = 0.35, rely = 0.03, relwidth = 0.48)
cust_name_btn = ctk.CTkEntry(info_cust_frame)
cust_name_btn.place(relx = 0.35, rely = 0.15, relwidth = 0.48)
cust_contact_btn = ctk.CTkEntry(info_cust_frame )
cust_contact_btn.place(relx = 0.35, rely = 0.27, relwidth = 0.48)
cust_date_btn = ctk.CTkEntry(info_cust_frame)
cust_date_btn.place(relx = 0.35, rely = 0.4, relwidth = 0.48)
cust_payment_mode_btn = ctk.CTkComboBox(info_cust_frame, values = ["Cash", "Net banking", "Credit Card"],  width = 200)
cust_payment_mode_btn.place(relx = 0.35, rely = 0.53, relwidth = 0.48)
cust_time_btn = ctk.CTkEntry(info_cust_frame)
cust_time_btn.place(relx = 0.35, rely = 0.66, relwidth = 0.48)

current_time = time.localtime()
formatted_time = time.strftime("%H:%M", current_time)
cust_time_btn.insert(0, formatted_time)

total_payment = ctk.CTkLabel(info_cust_frame, text = "Total Payment: ")
total_payment.place(relx = 0.03, rely = 0.79)
total_payment_btn = ctk.CTkEntry(info_cust_frame)
total_payment_btn.place(relx = 0.35, rely = 0.79, relwidth = 0.5)

generate_payment_btn = ctk.CTkButton(info_cust_frame, text = "Generate Payment", command=generate_payment)
generate_payment_btn.place(relx = 0.23 , rely = 0.9, relwidth = 0.55)

##############################################################################################

no_of_items_purchased = ctk.CTkLabel(info_item_frame, text = "No. of items purchased : ")
no_of_items_purchased.grid(row = 0, column = 0, padx = (20, 5))

no_of_items_purchased_btn = ctk.CTkEntry(info_item_frame, width = 120)
no_of_items_purchased_btn.grid(row = 0, column = 1, padx = (0, 20), pady = 10)

create = ctk. CTkButton(info_item_frame, text = "Create", command = create_box, width = 100)
create.grid(row = 1, column = 0)
reset_btn = ctk.CTkButton(info_item_frame, text = "Reset", width = 100, command = reset_box)
reset_btn.grid(row = 1, column = 1)

###################################################################################################

bill_area_label = tk.Label(bill_frame, text = "BILL AREA", font=("times new roman", 20))
bill_area_label.pack(fill = "x")

bill_area = tk.Text(bill_frame)
bill_area.pack(fill = "both", expand = True)

###################################################################################################

btn_add_data = ctk.CTkButton(btn_frame, text = "Add Data", command=add)
btn_add_data.place(relx = 0.02, rely = 0.15, relheight = 0.7, relwidth = 0.13)

btn_delete_data = ctk.CTkButton(btn_frame, text = "Delete Data", command=delete)
btn_delete_data.place(relx = 0.16, rely = 0.15, relheight = 0.7, relwidth = 0.13)

btn_update_data = ctk.CTkButton(btn_frame, text = "Update Data", command=update)
btn_update_data.place(relx = 0.30, rely = 0.15, relheight = 0.7, relwidth = 0.13)

btn_reset_data = ctk.CTkButton(btn_frame, text = "Reset", command=reset)
btn_reset_data.place(relx = 0.44, rely = 0.15, relheight = 0.7, relwidth = 0.13)

btn_generate_bill= ctk.CTkButton(btn_frame, text = "Generate Bill", command=create_bill)
btn_generate_bill.place(relx = 0.58, rely = 0.15, relheight = 0.7, relwidth = 0.13)

btn_save_bill = ctk.CTkButton(btn_frame, text = "Save Bill", command = save_bill)
btn_save_bill.place(relx = 0.72, rely = 0.15, relheight = 0.7, relwidth = 0.13)

btn_print_bill = ctk.CTkButton(btn_frame, text = "Print Bill", command = print_bill)
btn_print_bill.place(relx = 0.86, rely = 0.15, relheight = 0.7, relwidth = 0.13)

###################################################################################################

tree = ttk.Treeview(
    record_frame,
    columns=("bill_ref_no", "name", "contact", "date", "payment_mode", "time", "total_payment"),
    show="headings"
)
tree.heading("bill_ref_no", text="Bill Ref No")
tree.heading("name", text="Name")
tree.heading("contact", text="Contact")
tree.heading("date", text="Date")
tree.heading("payment_mode", text="Payment Mode")
tree.heading("time", text = "Time")
tree.heading("total_payment", text="Total Payment")

tree.column("bill_ref_no", anchor="center", stretch=True)
tree.column("name", anchor="center", stretch=True)
tree.column("contact", anchor="center", stretch=True)
tree.column("date", anchor="center", stretch=True)
tree.column("payment_mode", anchor="center", stretch=True)
tree.column("time", anchor="center", stretch = True)
tree.column("total_payment", anchor="center", stretch=True)

tree.pack(expand=True, fill="both", padx=10, pady=10)
tree.bind("<ButtonRelease-1>", get_cursor)
fetch_data()



# Scrollbars##########################################################################3
v_scroller = tk.Scrollbar(tree, orient="vertical", command=tree.yview)
v_scroller.pack(side="right", fill="y")

h_scroller = tk.Scrollbar(tree, orient="horizontal", command=tree.xview)
h_scroller.pack(side="bottom", fill="x")

tree.configure(yscrollcommand=v_scroller.set, xscrollcommand=h_scroller.set)

######################################################################################

root.mainloop()
